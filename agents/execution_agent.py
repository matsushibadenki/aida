# path: aida/agents/execution_agent.py
# title: Execution Agent
# role: Executes shell commands within the project's sandbox environment.

import subprocess
import sys
from pathlib import Path

class ExecutionAgent:
    """
    This agent is responsible for executing arbitrary shell commands
    within a specified project directory.
    """
    def __init__(self):
        """
        Initializes the ExecutionAgent.
        """
        pass

    def run(self, project_path: str, command: str) -> tuple[bool, str]:
        """
        Runs a command in the specified project path.

        Args:
            project_path: The absolute path to the project directory (sandbox).
            command: The command string to execute.

        Returns:
            A tuple containing a boolean indicating if the command succeeded (exit code 0),
            and a string with the captured output (stdout and stderr).
        """
        print(f"[ExecutionAgent] Running command in '{project_path}': {command}")

        if not Path(project_path).is_dir():
            return False, f"Error: Project path does not exist or is not a directory: {project_path}"

        try:
            # We use shell=True for flexibility, but this should be used with caution
            # as it can be a security risk if the command is not trusted.
            # In AIDA's case, the commands are generated by the trusted PlanningAgent.
            process = subprocess.run(
                command,
                shell=True,
                cwd=project_path,
                capture_output=True,
                text=True,
                timeout=120  # Increased timeout for potentially long-running commands
            )

            output = f"--- STDOUT ---\n{process.stdout}\n\n--- STDERR ---\n{process.stderr}"

            if process.returncode == 0:
                print(f"[ExecutionAgent] Command executed successfully (exit code: {process.returncode}).")
                return True, output
            else:
                print(f"[ExecutionAgent] Command failed (exit code: {process.returncode}).")
                return False, output

        except subprocess.TimeoutExpired:
            return False, "Error: Command execution timed out after 120 seconds."
        except Exception as e:
            return False, f"An unexpected error occurred while running the command: {e}"